AWSTemplateFormatVersion: '2010-09-09'
Description: Stack to common security groups

# This stack uses 10.0.0.0/0 as a CIDR block to cast a wide net. Alternatively,
# CIDR blocks could be pulled from the app-vpc-stack.

Resources:
  rIncomingDnsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow DNS."
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 53
          ToPort: 53
          CidrIp: 10.0.0.0/8
        - IpProtocol: udp
          FromPort: 53
          ToPort: 53
          CidrIp: 10.0.0.0/8
      Tags:
        - Key: Name
          Value: !Join [ ":", [ !Ref "AWS::StackName", sg-incoming-dns ] ]
      VpcId: !ImportValue app-01-vpc-stack:vpc-id

  rIncomingHttpSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow HTTP."
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 10.0.0.0/8
      Tags:
        - Key: Name
          Value: !Join [ ":", [ !Ref "AWS::StackName", sg-incoming-http ] ]
      VpcId: !ImportValue app-01-vpc-stack:vpc-id

  rIncomingPostgresqlSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow access to PostgreSQL."
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: 10.0.0.0/8
      Tags:
        - Key: Name
          Value: !Join [ ":", [ !Ref "AWS::StackName", sg-incoming-postgres ] ]
      VpcId: !ImportValue app-01-vpc-stack:vpc-id

  rIncomingSslSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow SSH."
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 10.0.0.0/8
      Tags:
        - Key: Name
          Value: !Join [ ":", [ !Ref "AWS::StackName", sg-incoming-ssh ] ]
      VpcId: !ImportValue app-01-vpc-stack:vpc-id

  rIncomingZookeeperSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow Zookeeper."
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 2181
          ToPort: 2181
          CidrIp: 10.0.0.0/8
      Tags:
        - Key: Name
          Value: !Join [ ":", [ !Ref "AWS::StackName", sg-incoming-zookeeper ] ]
      VpcId: !ImportValue app-01-vpc-stack:vpc-id

Outputs:
    oIncomingDnsSecurityGroup:
      Value: !Ref rIncomingDnsSecurityGroup
      Export:
        Name: !Join [ ":", [ !Ref "AWS::StackName", incoming-dns-sg ] ]
    oIncomingHttpSecurityGroup:
      Value: !Ref rIncomingHttpSecurityGroup
      Export:
        Name: !Join [ ":", [ !Ref "AWS::StackName", incoming-http-sg ] ]
    oIncomingPostgresqlSecurityGroup:
      Value: !Ref rIncomingPostgresqlSecurityGroup
      Export:
        Name: !Join [ ":", [ !Ref "AWS::StackName", incoming-postgresql-sg ] ]
    oIncomingSslSecurityGroup:
      Value: !Ref rIncomingSslSecurityGroup
      Export:
        Name: !Join [ ":", [ !Ref "AWS::StackName", incoming-ssl-sg ] ]
    oIncomingZookeeperSecurityGroup:
      Value: !Ref rIncomingZookeeperSecurityGroup
      Export:
        Name: !Join [ ":", [ !Ref "AWS::StackName", incoming-zookeeper-sg ] ]
