# This stack builds a basic VPC environment. It will not be appropriate for
# all situations but it can be a starting point.

# This stack contains:
#    - gateways
#    - endpoints
#    - subnets
#    - routes
#    - network ACLs
#    - security groups
#    - S3 bucket storage

AWSTemplateFormatVersion: 2010-09-09
Description: A basic VPC stack

################################################################################
################################################################################
################################################################################
################################################################################

Parameters:
  pVpcName:
    Description: The value to use for the VPC name tag.
    Type: String
    Default: basic-vpc

  pCidrBlock:
    Description: CIDR block for the entire VPC.
    Type: String
    Default: 10.5.0.0/16

  pPublicSubnetACidrBlock:
    Description: CIDR block for public subnet A.
    Type: String
    Default: 10.5.0.0/24

  pPrivateSubnetACidrBlock:
    Description: CIDR block for private subnet A.
    Type: String
    Default: 10.5.100.0/24

  pPublicSubnetBCidrBlock:
    Description: CIDR block for public subnet B.
    Type: String
    Default: 10.5.1.0/24

  pPrivateSubnetBCidrBlock:
    Description: CIDR block for private subnet B.
    Type: String
    Default: 10.5.101.0/24

  pVpcStorageBucketName:
    Description: Name of the S3 bucket used for VPC storage.
    Type: String
    Default: vpc-storage

################################################################################
################################################################################
################################################################################
################################################################################

Resources:

  #-----------------------------------------------------------------------------
  # Create the VPC and its associated gateways and endpoints
  #-----------------------------------------------------------------------------
  rVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref pCidrBlock
      EnableDnsSupport: true
      EnableDnsHostnames: false
      InstanceTenancy: default
      Tags:
      - Key: Name
        Value: !Ref pVpcName

  rInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !Join [ "-", [ !Ref "AWS::StackName", "internet-gateway" ] ]

  rVPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref rInternetGateway
      VpcId: !Ref rVPC
    DependsOn:
      - rVPC
      - rInternetGateway

  rVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Join [ '', [ "com.amazonaws.", !Ref 'AWS::Region', ".s3" ] ]
      VpcId: !Ref rVPC
      PolicyDocument:
        Version: 2012-10-17
        Statement:
        - Action: "*"
          Effect: Allow
          Resource: "*"
          Principal: "*"
    DependsOn:
      - rVPC

  rElasticIpForNatGatewayA:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  rElasticIpForNatGatewayB:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  #-----------------------------------------------------------------------------
  # Create all subnets
  #-----------------------------------------------------------------------------

  rPublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref rVPC
      CidrBlock: !Ref pPublicSubnetACidrBlock
      MapPublicIpOnLaunch: false
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: !Ref "AWS::Region"
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref "AWS::StackName", "public-subnet-a" ] ]
    DependsOn:
      - rVPC

  rNatGatewayA:
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId: !Ref rPublicSubnetA
      AllocationId: !GetAtt rElasticIpForNatGatewayA.AllocationId
    DependsOn:
      - rPublicSubnetA
      - rElasticIpForNatGatewayA

  rPublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref rVPC
      CidrBlock: !Ref pPublicSubnetBCidrBlock
      MapPublicIpOnLaunch: false
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: !Ref "AWS::Region"
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref "AWS::StackName", "public-subnet-b" ] ]
    DependsOn:
      - rVPC

  rNatGatewayB:
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId: !Ref rPublicSubnetB
      AllocationId: !GetAtt rElasticIpForNatGatewayB.AllocationId
    DependsOn:
      - rPublicSubnetB
      - rElasticIpForNatGatewayB

  rPrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref rVPC
      CidrBlock: !Ref pPrivateSubnetACidrBlock
      MapPublicIpOnLaunch: false
      AvailabilityZone: !GetAtt rPublicSubnetA.AvailabilityZone
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref "AWS::StackName", "private-subnet-a" ] ]
    DependsOn:
      - rVPC
      - rPublicSubnetA

  rPrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref rVPC
      CidrBlock: !Ref pPrivateSubnetBCidrBlock
      MapPublicIpOnLaunch: false
      AvailabilityZone: !GetAtt rPublicSubnetB.AvailabilityZone
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref "AWS::StackName", "private-subnet-b" ] ]
    DependsOn:
      - rVPC
      - rPublicSubnetB

  #-----------------------------------------------------------------------------
  # Create all route tables and routes
  #-----------------------------------------------------------------------------
  rPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref rVPC
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref "AWS::StackName", "public-route-table" ] ]
    DependsOn:
      - rVPC

  rPublicRoute1:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref rInternetGateway
      RouteTableId: !Ref rPublicRouteTable
    DependsOn:
      - rInternetGateway
      - rPublicRouteTable

  rPrivateRouteTableA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref rVPC
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref "AWS::StackName", "private-route-table-a" ] ]
    DependsOn:
      - rVPC

  rPrivateRouteA1:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref rNatGatewayA
      RouteTableId: !Ref rPrivateRouteTableA
    DependsOn:
      - rNatGatewayA
      - rPrivateRouteTableA

  rPrivateRouteTableB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref rVPC
      Tags:
      - Key: Name
        Value: !Join [ "-", [ !Ref "AWS::StackName", "private-route-table-b" ] ]
    DependsOn:
      - rVPC

  rPrivateRouteB1:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref rNatGatewayB
      RouteTableId: !Ref rPrivateRouteTableB
    DependsOn:
      - rNatGatewayB
      - rPrivateRouteTableB

  #-----------------------------------------------------------------------------
  # Associate subnets with route tables
  #-----------------------------------------------------------------------------

  rPublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref rPublicRouteTable
      SubnetId: !Ref rPublicSubnetA
    DependsOn:
      - rPublicRouteTable
      - rPublicSubnetA

  rPublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref rPublicRouteTable
      SubnetId: !Ref rPublicSubnetB
    DependsOn:
      - rPublicRouteTable
      - rPublicSubnetB

  rPrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref rPrivateRouteTableA
      SubnetId: !Ref rPrivateSubnetA
    DependsOn:
      - rPrivateRouteTableA
      - rPrivateSubnetA

  rPrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref rPrivateRouteTableB
      SubnetId: !Ref rPrivateSubnetB
    DependsOn:
      - rPrivateRouteTableB
      - rPrivateSubnetB

  #-----------------------------------------------------------------------------
  # Create all NACLs
  #-----------------------------------------------------------------------------

  rPublicNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref rVPC
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref "AWS::StackName", "public-network-acl" ] ]
    DependsOn:
      - rVPC

  rPublicNetworkAclEntry1:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: false
      NetworkAclId: !Ref rPublicNetworkAcl
      Protocol: -1
      RuleAction: allow
      RuleNumber: 100
    DependsOn:
      - rPublicNetworkAcl

  rPublicNetworkAclEntry2:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: true
      NetworkAclId: !Ref rPublicNetworkAcl
      Protocol: -1
      RuleAction: allow
      RuleNumber: 100
    DependsOn:
      - rPublicNetworkAcl

  rPrivateNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref rVPC
      Tags:
      - Key: Name
        Value: !Join [ "-", [ !Ref "AWS::StackName", "private-network-acl" ] ]
    DependsOn:
      - rVPC

  rPrivateNetworkAclEntry1:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: false
      NetworkAclId: !Ref rPrivateNetworkAcl
      Protocol: -1
      RuleAction: allow
      RuleNumber: 100
    DependsOn:
      - rPrivateNetworkAcl

  rPrivateNetworkAclEntry2:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: true
      NetworkAclId: !Ref rPrivateNetworkAcl
      Protocol: -1
      RuleAction: allow
      RuleNumber: 100
    DependsOn:
      - rPrivateNetworkAcl

  #-----------------------------------------------------------------------------
  # Associate subnets with NACLs
  #-----------------------------------------------------------------------------

  rPublicSubnetANetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref rPublicSubnetA
      NetworkAclId: !Ref rPublicNetworkAcl
    DependsOn:
      - rPublicSubnetA
      - rPublicNetworkAcl

  rPubicSubnetBNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref rPublicSubnetB
      NetworkAclId: !Ref rPublicNetworkAcl
    DependsOn:
      - rPublicSubnetB
      - rPublicNetworkAcl

  rPrivateSubnetANetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref rPrivateSubnetA
      NetworkAclId: !Ref rPrivateNetworkAcl
    DependsOn:
      - rPrivateSubnetA
      - rPrivateNetworkAcl

  rPrivateSubnetBNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref rPrivateSubnetB
      NetworkAclId: !Ref rPrivateNetworkAcl
    DependsOn:
      - rPrivateSubnetB
      - rPrivateNetworkAcl

  #-----------------------------------------------------------------------------
  # Create all security groups
  #-----------------------------------------------------------------------------

  rPublicSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref rVPC
      GroupDescription: security group for public subnets
      SecurityGroupIngress:
        - IpProtocol: icmp
          FromPort: 8
          ToPort: -1
          CidrIp: !Ref pCidrBlock
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref pCidrBlock
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref "AWS::StackName", "public-subnet-security-group" ] ]
    DependsOn:
      - rVPC

  rPrivateSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref rVPC
      GroupDescription: security group for private subnets
      SecurityGroupIngress:
        - IpProtocol: icmp
          FromPort: 8
          ToPort: -1
          CidrIp: !Ref pCidrBlock
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref pCidrBlock
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref pCidrBlock
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref "AWS::StackName", "private-subnet-security-group" ] ]
    DependsOn:
      - rVPC
  
  #-----------------------------------------------------------------------------
  # S3 bucket used for VPC storage
  #-----------------------------------------------------------------------------

  rBaseVpcStorageBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref pVpcStorageBucketName
      VersioningConfiguration:
        Status: Enabled

################################################################################
################################################################################
################################################################################
################################################################################

Outputs:
  oBaseVPCAccountId:
    Description: The ID of the AWS account with which the base VPC was created
    Value: !Ref "AWS::AccountId"
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", account-id ] ]

  oVPCId:
    Description: The base VPC that was created
    Value: !Ref rVPC
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", vpc-id ] ]

  oBaseVPCRegion:
    Description: Region in which the base VPC was created
    Value: !Ref "AWS::Region"
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", vpc-region ] ]

  oPublicSubnetA:
    Description: The public subnet for the first availability zone.
    Value: !Ref rPublicSubnetA
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", public-subnet-a ] ]

  oPublicSubnetB:
    Description: The public subnet for the second availability zone.
    Value: !Ref rPublicSubnetB
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", public-subnet-b ] ]

  oPrivateSubnetA:
    Description: The private subnet for the first availability zone.
    Value: !Ref rPrivateSubnetA
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", private-subnet-a ] ]

  oPrivateSubnetB:
    Description: The private subnet for the second availability zone.
    Value: !Ref rPrivateSubnetB
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", private-subnet-b ] ]

  oPublicSubnetACidrBlock:
    Description: CIDR block for public subnet A.
    Value: !Ref pPublicSubnetACidrBlock
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", public-subnet-a-cidr-block ] ]

  oPublicSubnetBCidrBlock:
    Description: CIDR block for public subnet B.
    Value: !Ref pPublicSubnetBCidrBlock
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", public-subnet-b-cidr-block ] ]

  oPrivateSubnetACidrBlock:
    Description: CIDR block for private subnet A.
    Value: !Ref pPrivateSubnetACidrBlock
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", private-subnet-a-cidr-block ] ]

  oPrivateSubnetBCidrBlock:
    Description: CIDR block for private subnet B.
    Value: !Ref pPrivateSubnetBCidrBlock
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", private-subnet-b-cidr-block ] ]

  oPublicSecurityGroup:
    Description: The security group used by instances in public subnets
    Value: !Ref rPublicSecurityGroup
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", public-subnet-security-group ] ]

  oPrivateSecurityGroup:
    Description: The security group used by instances in private subnets
    Value: !Ref rPrivateSecurityGroup
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", private-subnet-security-group ] ]

  oBaseVpcStorageBucketName:
    Description: The name of the S3 bucket created for VPC storage
    Value: !Ref rBaseVpcStorageBucket
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", vpc-storage-bucket ] ]

  oAvailabilityZonePublicSubnetA:
    Description: The availability zone of the public A subnet.
    Value: !GetAtt rPublicSubnetA.AvailabilityZone
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", public-subnet-a-availability-zone ] ]

  oAvailabilityZonePublicSubnetB:
    Description: The availability zone of the public B subnet.
    Value: !GetAtt rPublicSubnetB.AvailabilityZone
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", public-subnet-b-availability-zone ] ]

  oAvailabilityZonePrivateSubnetA:
    Description: The availability zone of the private A subnet.
    Value: !GetAtt rPrivateSubnetA.AvailabilityZone
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", private-subnet-a-availability-zone ] ]

  oAvailabilityZonePrivateSubnetB:
    Description: The availability zone of the private B subnet.
    Value: !GetAtt rPrivateSubnetB.AvailabilityZone
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", private-subnet-b-availability-zone ] ]
